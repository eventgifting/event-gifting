Message: Error in Prisma Client request: 


Invalid `STUDIO_EMBED_BUILD<"u"&&STUDIO_EMBED_BUILD?Mbt():require(`${l.prismaClient}/runtime/${u}`),P=e,k=(0,Aye.createHash)("sha256").update()` invocation in
/home/runner/workspace/node_modules/prisma/build/index.js:4970:10856

  4967 - If they want to connect to an existing database, they should go to console.prisma.io and copy the connection string
  4968 - If they want to upgrade their plan, they should go to console.prisma.io and upgrade their plan in order to be able to create more databases
  4969 - If they want to delete a database they no longer need, they should go to console.prisma.io and delete the database project`,{name:Y.string(),region:Y.string(),projectCWD:Y.string()},async({name:a,region:c,projectCWD:u})=>({content:[{type:"text",text:await zw({cwd:u,args:["init","--db","--name",a,"--region",c,"--non-interactive"]})}]})),i.tool("Prisma-Login","Login or create an account in order to be able to use Prisma Postgres.",{projectCWD:Y.string()},async({projectCWD:a})=>({content:[{type:"text",text:await zw({cwd:a,args:["platform","auth","login","--early-access"]})}]})),i.tool("Prisma-Studio",`Open Prisma Studio to view data in your database in a pleasing visual ui.
â†’ 4970 Provide the current working directory of the users project. This should be the top level directory of the project.`,{projectCWD:Y.string()},async({projectCWD:a})=>({content:[{type:"text",text:await zw({cwd:a,args:["studio"]})}]}));let o=new z7;return await i.connect(o),""}};f7();ur();var Ybt=require("@prisma/engines");Fe();var Adt=require("buffer");function Pdt(e,r,n,i){Object.defineProperty(e,r,{get:n,set:i,enumerable:!0,configurable:!0})}var Odt={};Pdt(Odt,"serializeRPCMessage",()=>Cge);Pdt(Odt,"deserializeRPCMessage",()=>Age);var Tge="PrismaBigInt::",Dge="PrismaBytes::";function Cge(e){return JSON.stringify(e,(r,n)=>typeof n=="bigint"?Tge+n:n?.type==="Buffer"&&Array.isArray(n?.data)?Dge+Adt.Buffer.from(n.data).toString("base64"):n)}function Age(e){return JSON.parse(e,(r,n)=>typeof n=="string"&&n.startsWith(Tge)?BigInt(n.substr(Tge.length)):typeof n=="string"&&n.startsWith(Dge)?n.substr(Dge.length):n)}var Ubt=U(Ndt()),XU=U(H0t()),Gbt=U(require("http")),Wbt=U(K0t()),Hbt=require("zlib");var xx=require("path");Fe();var Aye=require("crypto"),Nbt=require("fs/promises"),Lbt=U(F0e());function Dye(e,r,n,i){Object.defineProperty(e,r,{get:n,set:i,enumerable:!0,configurable:!0})}var Bbt=globalThis,_ye={},QU={},sE=Bbt.parcelRequire94c2;sE==null&&(sE=function(e){if(e in _ye)return _ye[e].exports;if(e in QU){var r=QU[e];delete QU[e];var n={id:e,exports:{}};return _ye[e]=n,r.call(n.exports,n,n.exports),n.exports}var i=new Error("Cannot find module '"+e+"'");throw i.code="MODULE_NOT_FOUND",i},sE.register=function(r,n){QU[r]=n},Bbt.parcelRequire94c2=sE);var jbt=sE.register;jbt("9lTzd",function(module,exports){Dye(module.exports,"guessEnginePaths",()=>guessEnginePaths),Dye(module.exports,"guessPrismaClientPath",()=>guessPrismaClientPath);var $5COlq=sE("5COlq");async function guessEnginePaths({forceBinary,forceLibrary,resolveOverrides}){let queryEngineName,queryEngineType;if(forceLibrary?(queryEngineName=await(0,$5COlq.prismaEngineName)("query-engine","library"),queryEngineType="library"):forceBinary?(queryEngineName=await(0,$5COlq.prismaEngineName)("query-engine","binary"),queryEngineType="binary"):(queryEngineName=void 0,queryEngineType=void 0),!queryEngineName||!queryEngineType)return{queryEngine:void 0};let queryEnginePath;if(resolveOverrides[".prisma/client"])queryEnginePath=(0,xx.resolve)(resolveOverrides[".prisma/client"],`../${queryEngineName}`);else if(resolveOverrides["@prisma/engines"])queryEnginePath=(0,xx.resolve)(resolveOverrides["@prisma/engines"],`../../${queryEngineName}`);else{let atPrismaEnginesPath;try{atPrismaEnginesPath=eval("require.resolve('@prisma/engines')")}catch(e){throw new Error("Unable to resolve Prisma engine paths. This is a bug.")}queryEnginePath=(0,xx.resolve)(atPrismaEnginesPath`../../${queryEngineName}`)}return{queryEngine:{type:queryEngineType,path:queryEnginePath}}}function guessPrismaClientPath({resolveOverrides}){let prismaClientPath=resolveOverrides["@prisma/client"]||eval("require.resolve('@prisma/client')");return(0,xx.resolve)(prismaClientPath,"../")}});jbt("5COlq",function(e,r){Dye(e.exports,"prismaEngineName",()=>n);async function n(i,o){let a=await Ro(),c=a==="windows"?".exe":"";if(o==="library")return dc(a,"fs");if(o==="binary")return`${i}-${a}${c}`;throw new Error(`Unknown engine type: ${o}`)}});function p6r(e){return{models:Tye(e.models),enums:Tye(e.enums),types:Tye(e.types)}}function Tye(e){let r={};for(let{name:n,...i}of e)r[n]=i;return r}var UR=(0,Lbt.debug)("prisma:studio-pcw"),f6r=/^\s*datasource\s+([^\s]+)\s*{/m,d6r=/url *= *env\("(.*)"\)/,m6r=/url *= *"(.*)"/;async function h6r({schema:e,schemaPath:r,dmmf:n,adapter:i,datasourceProvider:o,previewFeatures:a,datasources:c,engineType:u,paths:l,directUrl:p,versions:f}){let g=e.match(f6r)?.[1]??"",x=e.match(d6r)?.[1]??null,b=e.match(m6r)?.[1]??null,{getPrismaClient:v,PrismaClientKnownRequestError:E,PrismaClientRustPanicError:_,PrismaClientInitializationError:C,PrismaClientValidationError:F}=typeof STUDIO_EMBED_BUILD<"u"&&STUDIO_EMBED_BUILD?Mbt():require(`${l.prismaClient}/runtime/${u}`),P=e,k=(0,Aye.createHash)("sha256").update(
The table `main.Performer` does not exist in the current database.
  
Query:
{
  "modelName": "Performer",
  "operation": "findMany",
  "args": {
    "take": 100,
    "skip": 0,
    "select": {
      "id": true,
      "name": true,
      "agency": true,
      "giftings": {
        "select": {
          "id": true
        }
      }
    }
  }
}